package goflags

import (
	"github.com/stretchr/testify/assert"
	"io/ioutil"
	"os"
	"testing"

	"github.com/stretchr/testify/require"
)

// New creates a new flagSet structure for the application
func newFlagSet() *FlagSet {
	return &FlagSet{flagKeys: *newInsertionOrderedMap()}
}

func newInsertionOrderedMap() *InsertionOrderedMap {
	return &InsertionOrderedMap{
		values: make(map[string]*flagData),
		keys:   make([]string, 0, 0),
	}
}

func TestGenerateDefaultConfig(t *testing.T) {
	flagSet := newFlagSet()

	example := `# goflags.test config file
# generated by https://github.com/projectdiscovery/goflags

# default value for a test flag example
#test: test-default-value

# string slice flag example value
#slice: ["item1", "item2"]`

	var data string
	var data2 StringSlice
	flagSet.StringVar(&data, "test", "test-default-value", "Default value for a test flag example")
	flagSet.StringSliceVar(&data2, "slice", []string{"item1", "item2"}, "String slice flag example value")
	require.Equal(t, example, string(flagSet.generateDefaultConfig()), "could not get correct default config")
}

func TestConfigFileDataTypes(t *testing.T) {
	flagSet := newFlagSet()

	var data string
	var data2 StringSlice
	var data3 int
	var data4 bool

	flagSet.StringVar(&data, "string-value", "", "Default value for a test flag example")
	flagSet.StringSliceVar(&data2, "slice-value", []string{}, "String slice flag example value")
	flagSet.IntVar(&data3, "int-value", 0, "Int value example")
	flagSet.BoolVar(&data4, "bool-value", false, "Bool value example")

	configFileData := `
string-value: test
slice-value: 
  - test
  - test2
int-value: 543
bool-value: true`
	err := ioutil.WriteFile("test.yaml", []byte(configFileData), os.ModePerm)
	require.Nil(t, err, "could not write temporary config")
	defer os.Remove("test.yaml")

	err = flagSet.MergeConfigFile("test.yaml")
	require.Nil(t, err, "could not merge temporary config")

	require.Equal(t, "test", data, "could not get correct string")
	require.Equal(t, StringSlice{"test", "test2"}, data2, "could not get correct string slice")
	require.Equal(t, 543, data3, "could not get correct int")
	require.Equal(t, true, data4, "could not get correct bool")
}

func TestUsageOrder(t *testing.T) {
	flagSet := newFlagSet()

	var stringData string
	var stringSliceData StringSlice
	var stringSliceData2 StringSlice
	var intData int
	var boolData bool

	flagSet.StringVar(&stringData, "string-value", "", "String example value example")
	flagSet.StringVarP(&stringData, "", "ts2", "test-string", "String with default value example #2")
	flagSet.StringVar(&stringData, "string-with-default-value", "test-string", "String with default value example")
	flagSet.StringVarP(&stringData, "string-with-default-value2", "ts", "test-string", "String with default value example #2")
	flagSet.StringSliceVar(&stringSliceData, "slice-value", []string{}, "String slice flag example value")
	flagSet.StringSliceVarP(&stringSliceData, "slice-value2", "sv", []string{}, "String slice flag example value #2")
	flagSet.StringSliceVar(&stringSliceData, "slice-with-default-value", []string{"a", "b", "c"}, "String slice flag with default example values")
	flagSet.StringSliceVarP(&stringSliceData2, "slice-with-default-value2", "swdf", []string{"a", "b", "c"}, "String slice flag with default example values #2")
	flagSet.IntVar(&intData, "int-value", 0, "Int value example")
	flagSet.IntVarP(&intData, "int-value2", "iv", 0, "Int value example #2")
	flagSet.IntVar(&intData, "int-with-default-value", 12, "Int with default value example")
	flagSet.IntVarP(&intData, "int-with-default-value2", "iwdv", 12, "Int with default value example #2")
	flagSet.BoolVar(&boolData, "bool-value", false, "Bool value example")
	flagSet.BoolVarP(&boolData, "bool-value2", "bv", false, "Bool value example #2")
	flagSet.BoolVar(&boolData, "bool-with-default-value", true, "Bool with default value example")
	flagSet.BoolVarP(&boolData, "bool-with-default-value2", "bwdv", true, "Bool with default value example #2")

	flagSet.usageFunc()
}

func TestIncorrectFlagsCausePanic(t *testing.T) {
	flagSet := newFlagSet()
	var stringData string

	flagSet.StringVar(&stringData, "", "test-string", "String with default value example")
	assert.Panics(t, flagSet.usageFunc)

	testSetBadChars := func(short string, long string) {
		flagSet.StringVarP(&stringData, short, long, "test-string", "String with default value example")
		flagSet.usageFunc()
	}

	for _, badChar := range [3]string{" ", "\t", "\n"} {
		assert.Panics(t, func() { testSetBadChars("", "") })
		assert.Panics(t, func() { testSetBadChars("", badChar) })
		assert.Panics(t, func() { testSetBadChars(badChar, "") })
		assert.Panics(t, func() { testSetBadChars(badChar, badChar) })
	}
}
