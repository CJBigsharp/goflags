package goflags

import (
	"io/ioutil"
	"os"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestGenerateDefaultConfig(t *testing.T) {
	f := New()

	example := `# goflags.test config file
# generated by https://github.com/projectdiscovery/goflags

# default value for a test flag example
#test: test-default-value

# string slice flag example value
#slice: ["item1", "item2"]`

	var data string
	var data2 StringSlice
	f.StringVar(&data, "test", "test-default-value", "Default value for a test flag example")
	f.StringSliceVar(&data2, "slice", []string{"item1", "item2"}, "String slice flag example value")
	require.Equal(t, example, string(f.generateDefaultConfig()), "could not get correct default config")
}

func TestConfigFileDataTypes(t *testing.T) {
	f := New()

	var data string
	var data2 StringSlice
	var data3 int
	var data4 bool

	f.StringVar(&data, "string-value", "", "Default value for a test flag example")
	f.StringSliceVar(&data2, "slice-value", []string{}, "String slice flag example value")
	f.IntVar(&data3, "int-value", 0, "Int value example")
	f.BoolVar(&data4, "bool-value", false, "Bool value example")

	configFileData := `
string-value: test
slice-value: 
  - test
  - test2
int-value: 543
bool-value: true`
	err := ioutil.WriteFile("test.yaml", []byte(configFileData), os.ModePerm)
	require.Nil(t, err, "could not write temporary config")
	defer os.Remove("test.yaml")

	err = f.MergeConfigFile("test.yaml")
	require.Nil(t, err, "could not merge temporary config")

	require.Equal(t, "test", data, "could not get correct string")
	require.Equal(t, StringSlice{"test", "test2"}, data2, "could not get correct string slice")
	require.Equal(t, 543, data3, "could not get correct int")
	require.Equal(t, true, data4, "could not get correct bool")
}
